"""
Django settings for zproject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', cast=str)
if not SECRET_KEY:
    raise ValueError('The SECRET_KEY environment variable must be set.')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', cast=bool, default=False)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=str).split(',')
if not ALLOWED_HOSTS:
    raise ValueError('The ALLOWED_HOSTS environment variable must be set.')
CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', cast=str).split(',')
if not CSRF_TRUSTED_ORIGINS:
    raise ValueError(
        'The CSRF_TRUSTED_ORIGINS environment variable must be set.')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'dashboard',
    'rest_framework',
    'oxapaycallback',
    'tailwind',
    'theme',
]
TAILWIND_APP_NAME = 'theme'
if DEBUG:
    # Add django_browser_reload only in DEBUG mode
    INSTALLED_APPS += ['django_browser_reload']

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
if DEBUG:
    # Add django_browser_reload middleware only in DEBUG mode
    MIDDLEWARE += [
        "django_browser_reload.middleware.BrowserReloadMiddleware",
    ]
ROOT_URLCONF = 'zproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'zproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DB_HOST = config('DB_HOST', cast=str)
DB_NAME = config('DB_NAME', cast=str)
DB_PASSWORD = config('DB_PASSWORD', cast=str)
DB_PORT = config('DB_PORT', cast=int)
DB_USER = config('DB_USER', cast=str)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
        # Production database optimization
        'CONN_MAX_AGE': 60,  # Connection pooling - reuse connections for 60 seconds
    }
}

# Celery configuration
CELERY_BROKER_URL = config('CELERY_BROKER_URL')


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# WhiteNoise configuration
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
OXAPAY_API_KEY = config('OXAPAY_API_KEY', cast=str)
SITE_URL = config('SITE_URL', cast=str)
API_BASE_URL = config('API_BASE_URL', cast=str)
API_KEY = config('API_KEY', cast=str)
if not OXAPAY_API_KEY:
    raise ValueError('The OXAPAY_API_KEY environment variable must be set.')
if not SITE_URL:
    raise ValueError('The SITE_URL environment variable must be set.')
if not API_BASE_URL:
    raise ValueError('The API_BASE_URL environment variable must be set.')
if not API_KEY:
    raise ValueError('The API_KEY environment variable must be set.')
TELEGRAM_BOT_TOKEN = config('TELEGRAM_BOT_TOKEN', cast=str)
TELEGRAM_ADMIN_ID = config('TELEGRAM_ADMIN_ID', cast=int)
if not TELEGRAM_BOT_TOKEN:
    raise ValueError(
        'The TELEGRAM_BOT_TOKEN environment variable must be set.')
if not TELEGRAM_ADMIN_ID:
    raise ValueError('The TELEGRAM_ADMIN_ID environment variable must be set.')

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

JSON_MODEL_NAMES = [
    'SSN',
    'SSN+DOB 3',
    'DOB',
    'DL Lookup 2',
    'DOB/VIN/DL',
    'Phone Lookup',
    'Reverse Phone',
    'Reverse SSN',
]

if not DEBUG:
    # ================================
    # ESSENTIAL PRODUCTION SETTINGS
    # ================================

    # Security Headers - Critical for production security
    SECURE_BROWSER_XSS_FILTER = True  # Enable XSS filtering in browsers
    SECURE_CONTENT_TYPE_NOSNIFF = True  # Prevent MIME type sniffing  
    X_FRAME_OPTIONS = 'DENY'  # Prevent clickjacking

    # HTTPS Settings - Enable only if using HTTPS
    SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', cast=bool, default=False)  # Set to True in production with HTTPS
    SESSION_COOKIE_SECURE = config('SESSION_COOKIE_SECURE', cast=bool, default=False)  # Set to True in production with HTTPS
    CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', cast=bool, default=False)  # Set to True in production with HTTPS

    # Session Security
    SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to session cookies
    CSRF_COOKIE_HTTPONLY = True  # Prevent JavaScript access to CSRF cookies

    # Basic Logging - Essential for production debugging
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'level': 'ERROR',
                'class': 'logging.StreamHandler',
            },
        },
        'loggers': {
            'django.request': {
                'handlers': ['console'],
                'level': 'ERROR',
                'propagate': False,
            },
        },
    }